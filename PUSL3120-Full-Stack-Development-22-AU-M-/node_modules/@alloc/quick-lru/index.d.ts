declare namespace QuickLRU {
	interface Options<KeyType, ValueType> {
		 

		@default Infinity

		By default, `maxAge` will be `Infinity`, which means that items will never expire.
		Lazy expiration upon the next write or read call.

		Individual expiration of an item can be specified by the `set(key, value, maxAge)` method.
		*/
		readonly maxAge?: number;

		 
		readonly maxSize: number;

		 
		onEviction?: (key: KeyType, value: ValueType) => void;
	}
}

declare class QuickLRU<KeyType, ValueType>
	implements Iterable<[KeyType, ValueType]> {
	
	readonly size: number;

	 
	@example
	```
	import QuickLRU = require('quick-lru');

	const lru = new QuickLRU({maxSize: 1000});

	lru.set('ðŸ¦„', 'ðŸŒˆ');

	lru.has('ðŸ¦„');
	//=> true

	lru.get('ðŸ¦„');
	//=> 'ðŸŒˆ'
	```
	*/
	constructor(options: QuickLRU.Options<KeyType, ValueType>);

	[Symbol.iterator](): IterableIterator<[KeyType, ValueType]>;

	 
	set(key: KeyType, value: ValueType, options?: {maxAge?: number}): this;

	 
	get(key: KeyType): ValueType | undefined;

	 
	has(key: KeyType): boolean;
 
	@returns The stored item or `undefined`.
	*/
	peek(key: KeyType): ValueType | undefined;
 
	delete(key: KeyType): boolean;

	 
	clear(): void;

	 
	resize(maxSize: number): void;

	 
	keys(): IterableIterator<KeyType>;

	 
	values(): IterableIterator<ValueType>;

 
	entriesAscending(): IterableIterator<[KeyType, ValueType]>;

	 
	entriesDescending(): IterableIterator<[KeyType, ValueType]>;
}

export = QuickLRU;
